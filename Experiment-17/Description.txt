Project Title:

Experiment 17 – Real-Time Product Chat Application

Overview:

This project is a real-time product chat web application designed to enable communication between users and administrators regarding various products. 
It demonstrates the integration of frontend (React.js) and backend (Node.js + Express) technologies, along with real-time communication using Socket.IO.

The system allows users to view product details and engage in live chat sessions with admins or other users. 
It’s a practical demonstration of client-server communication, data handling, and modern web development concepts.

Key Features:
=============
- Product Listing: Fetches and displays product details dynamically from the backend- 
- Real-Time Chat: Enables instant communication using Socket.IO- 
- RESTful API: Backend handles HTTP requests efficiently with Express.js- 
- Dynamic Data Fetching: Uses Axios to communicate between frontend and backend- 
- Responsive UI: Built with React.js components for modern and user-friendly interaction.

Technologies Used:

Frontend:

- React.js – for building the user interface.
- Axios – for handling API requests and responses.
- Socket.IO Client – for enabling real-time communication with the backend.
- CSS – for styling and responsive design.

Backend:

- Node.js – for creating the server environment.
- Express.js – for routing and API management.
- Socket.IO – for implementing real-time chat functionality.
- CORS & Body-Parser – for handling data flow and security between frontend and backend.

Folder Structure:
=================
Experiment-17/
│
├── Backend/
│   ├── server.js
│   ├── package.json
│   └── node_modules/
│
├── Frontend/
│   ├── src/
│   │   ├── components/
│   │   │   ├── Chat.js
│   │   │   └── ProductList.js
│   │   ├── App.js
│   │   ├── index.js
│   │   └── App.css
│   ├── package.json
│   └── node_modules/
│
└── description.txt

Steps to Run the Project:
==========================
Open two separate terminals — one for backend and one for frontend.

Run the Backend:
---------------
cd Backend
npm install
node server.js

The backend server will start at http://localhost:5000

Run the Frontend:
----------------
cd Frontend
npm install
npm start

The React app will open automatically in your browser at http://localhost:3000

Make sure both the frontend and backend are running simultaneously to enable real-time chat.

Learning Outcomes :
==================

= Understand how to create a backend API using Express.js and serve data to a frontend.
= Learn how to use Axios in React to make HTTP requests and fetch data from the server.
= Gain experience in handling asynchronous data fetching, including loading states and error handling.
= Learn to display fetched data dynamically in a React component using JSX.
= Understand the basics of WebSocket communication and real-time data transf